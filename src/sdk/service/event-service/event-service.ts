import { EventType } from '../../model/event/__json__/event-type';

/**
 * Event service.
 */
/* istanbul ignore next: autogenerated */
export class EventService {

  /**
   * Get the event type message depending on the type.
   * @param eventType
   * @returns {string} The human readable message.
   */
  static getEventTypeMsg(eventType: EventType): string {
    switch (eventType) {
      case 'ORG_CREATE':
        return 'An organization was created.';
      case 'ORG_DELETE':
        return 'An organization was deleted.';
      case 'ORG_MODIFY':
        return 'An organization was modified.';
      case 'ORG_ANTIMALWARE_REPORT_GENERATE':
        return 'An organization anti-malware report was generated.';
      case 'ORG_BILLING_REPORT_GENERATE' :
        return 'An organization billing report was generated.';
      case 'ORG_CONTINUITY_PROTECTION_REPORT_GENERATE':
        return 'An organization continuity protection report was generated.';
      case 'ORG_DR_ADMIN_REPORT_GENERATE' :
        return 'An organization data recovery admin report was generated.';
      case 'ORG_DPI_EVENT_REPORT_GENERATE' :
        return 'An organization DPI event report was generated.';
      case 'ORG_ECS_EVENT_HISTORY_REPORT_GENERATE' :
        return 'An organization event history report was generated.';
      case 'ORG_FAILOVER_TEST_REPORT_GENERATE' :
        return 'An organization failover test report was generated.';
      case 'ORG_FIREWALL_EVENT_REPORT_GENERATE' :
        return 'An organization firewall event report was generated.';
      case 'ORG_HIPAA_REPORT_GENERATE' :
        return 'An organization HIPAA report was generated.';
      case 'ORG_INTEGRITY_EVENT_REPORT_GENERATE' :
        return 'An organization integrity event report was generated.';
      case 'ORG_LOG_INSPECTION_REPORT_GENERATE' :
        return 'An organization log inspection report was generated.';
      case 'ORG_LOGIN_EVENT_HISTORY_REPORT_GENERATE' :
        return 'An organization login event history report was generated.';
      case 'ORG_SUPPORT_REQUEST_REPORT_GENERATE' :
        return 'An organization support request report was generated.';
      case 'ORG_VM_ENCRYPTION_REPORT_GENERATE' :
        return 'An organization vm encryption report was generated.';
      case 'ORG_VULNERABILITY_REPORT_GENERATE' :
        return 'An organization vulnerability report was generated.';
      case 'ORG_WEB_REPUTATION_REPORT_GENERATE' :
        return 'An organization web reputation report was generated.';
      case 'ORG_DR_RUNBOOK_REPORT_GENERATE' :
        return 'An organization data recovery runbook report was generated.';
      case 'ORG_VM_INVENTORY_REPORT_GENERATE' :
        return 'An organization vm inventory report was generated.';
      case 'ORG_BILL_CALCULATED' :
        return 'An organization bill was calculated.';
      case 'ORG_DELETE_DNS_ZONE' :
        return 'An organization DNS zone was deleted.';
      case 'ORG_ADD_DNS_ZONE' :
        return 'An organization DNS zone was added.';
      case 'ORG_PUSH_DNS_ZONE' :
        return 'An organization DNS zone was pushed.';
      case 'ORG_DELETE_DNS_RECORD' :
        return 'An organization DNS record was deleted.';
      case 'ORG_UPDATE_DNS_RECORD' :
        return 'An organization DNS record was updated.';
      case 'ORG_ADD_DNS_RECORD' :
        return 'An organization DNS record was added.';
      case 'ORG_VULNERABILITY_SCAN_LAUNCH' :
        return 'An organization vulnerability scan was launched.';
      case 'ORG_VULNERABILITY_SCAN_PAUSE' :
        return 'An organization vulnerability scan was paused.';
      case 'ORG_VULNERABILITY_SCAN_STOP' :
        return 'An organization vulnerability scan was stopped.';
      case 'ORG_VULNERABILITY_SCAN_RESUME' :
        return 'An organization vulnerability scan was resumed.';
      // EDGE
      case 'EDGE_CREATE' :
        return 'An edge was created.';
      case 'EDGE_DELETE' :
        return 'An edge was deleted.';
      case 'EDGE_MODIFY' :
        return 'An edge was updated.';
      case 'EDGE_UPGRADE' :
        return 'An edge was upgraded.';
      case 'EDGE_FIREWALL_MODIFIED' :
        return 'An edge firewall was updated.';
      case 'EDGE_IPSEC_VPN_SERVICE_UPDATE' :
        return 'An edge IPSEC VPN was updated.';
      // VM
      case 'VM_CREATE' :
        return 'A virtual machine was created.';
      case 'VM_CREATE_REQUEST' :
        return 'A request to create a virtual machine was blocked pending administrative action.';
      case 'VM_DELETE' :
        return 'A virtual machine was deleted.';
      case 'VM_MODIFY' :
        return 'A virtual machine was updated.';
      case 'VM_MODIFY_REQUEST' :
        return 'A request to modify a virtual machine was blocked pending administrative action.';
      case 'VM_DEPLOY' :
        return 'A virtual machine was deployed.';
      case 'VM_DEPLOY_REQUEST' :
        return 'A request to deploy a virtual machine was blocked pending administrative action.';
      case 'VM_UNDEPLOY_REQUEST' :
        return 'A request to un-deploy a virtual machine was blocked pending administrative action.';
      case 'VM_UNDEPLOY' :
        return 'A virtual machine was un-deployed.';
      case 'VM_CONSOLIDATE' :
        return 'A virtual machine was consolidated.';
      case 'VM_CONSOLIDATE_REQUEST' :
        return 'A request to consolidate a virtual machine was blocked pending administrative action.';
      case 'VM_RELOCATE' :
        return 'A virtual machine was relocated.';
      case 'VM_RELOCATE_REQUEST' :
        return 'A request to relocate a virtual machine was blocked pending administrative action.';
      case 'VM_POWER_STATE_CHANGE' :
        return 'The power state of a virtual machine has changed.';
      case 'VM_IP_ADDRESS_CHANGED' :
        return 'A virtual machine IP address changed.';
      case 'VM_RESTORE_BACKUP_START' :
        return 'Virtual machine restore from backup has started.';
      case 'VM_RESTORE_BACKUP_END' :
        return 'Virtual machine restore from backup has ended.';
      case 'VM_IDENTITY_CHANGED' :
        return 'Virtual machine identity changed.';
      case 'VM_BILL_CALCULATED' :
        return 'Virtual machine monthly bill was calculated.';
      case 'VM_FIREWALL_EVENT' :
        return 'A firewall event occured.';
      case 'VM_ANTIMALWARE_EVENT' :
        return 'An anti-malware event occured.';
      case 'VM_WEB_REPUTATION_EVENT' :
        return 'A web repuration event occured.';
      case 'VM_LOG_INSPECTION_EVENT' :
        return 'A log inspection event occured.';
      case 'VM_DPI_EVENT' :
        return 'A DPI event occured.';
      case 'VM_INTEGRITY_EVENT' :
        return 'An integrity event occured.';
      case 'VM_UPDATE_VMWARE_TOOLS_UPGRADE_POLICY' :
        return 'VMWare tools upgrade policy was updated.';
      case 'VM_UPDATE_BOOT_OPTIONS' :
        return 'Boot options updated.';
      case 'VM_VMWARE_TOOLS_REINSTALL' :
        return 'VMWare tools re-installed.';
      case 'VM_DRS_RULES_UPDATE' :
        return 'DRS rules were updated.';
      case 'VM_DRS_RULES_ADD' :
        return 'DRS rules were added.';
      case 'VM_DRS_RULES_DELETE' :
        return 'DRS rules were deleted.';
      case 'VM_VMWARE_TOOLS_UPGRADE' :
        return 'VMWare tools upgrade.';
      // VAPP
      case 'VAPP_CREATE' :
        return 'A vApp was created.';
      case 'VAPP_IMPORT' :
        return 'A vApp was imported.';
      case 'VAPP_DELETE' :
        return 'A vApp was deleted.';
      case 'VAPP_MODIFY' :
        return 'A vApp was modified.';
      case 'VAPP_DEPLOY' :
        return 'A vApp was deployed.';
      case 'VAPP_UNDEPLOY' :
        return 'A vApp was undeployed.';
      case 'VAPP_UPLOAD_TIMEOUT' :
        return 'Timeout during upload.';
      case 'VAPP_RUNTIME_LEASE_EXPIRE' :
        return 'Runtime lease expired.';
      case 'VAPP_IMPORT_REQUEST' :
        return 'vApp import requested.';
      case 'VAPP_MODIFY_REQUEST' :
        return 'vApp modify requested.';
      case 'VAPP_CREATE_REQUEST' :
        return 'vApp creation requested.';
      case 'VAPP_DELETE_REQUEST' :
        return 'vApp deletion requested.';
      case 'VAPP_DEPLOY_REQUEST' :
        return 'vApp deploy requested.';
      case 'VAPP_UNDEPLOY_REQUEST' :
        return 'vApp undeploy request.';
      case 'VAPP_LEASE_EXPIRATION_CHANGED' :
        return 'Lease expiration changed.';
      case 'VAPP_BILL_CALCULATED' :
        return 'vApp monthly bill was calculated.';
      case 'VAPP_ENABLE_DOWNLOAD' :
        return 'Download enabled.';
      case 'VAPP_DOWNLOAD' :
        return 'vApp Downloaded';
      // VDC
      case 'VDC_VM_INVENTORY_REPORT_GENERATE' :
        return 'A VM inventory report generation event.';
      case 'VDC_CREATE_REQUEST' :
        return 'Vdc creation requested.';
      case 'VDC_DELETE_REQUEST' :
        return 'Entity deletion requested.';
      case 'VDC_CREATE' :
        return 'A vdc was created.';
      case 'VDC_DELETE' :
        return 'A vdc was deleted.';
      case 'VDC_MODIFY' :
        return 'A vdc was modified.';
      case 'VDC_FAST_PROVISIONING_MODIFY' :
        return 'Fast provisioning was modified.';
      case 'VDC_THIN_PROVISIONING_MODIFY' :
        return 'Thin provisioning was modified.';
      case 'VDC_BILL_CALCULATED' :
        return 'Monthly bill was calculated.';
      case 'VDC_CONTRACT_CHANGED' :
        return 'Contract has changed.';
      // PROVIDER VDC
      case 'PROVIDER_VDC_CREATE' :
        return 'Provider vDC was created.';
      case 'PROVIDER_VDC_CREATE_REQUEST' :
        return 'Provider vDC creation requested.';
      case 'PROVIDER_VDC_DELETE' :
        return 'Provider vDC was deleted.';
      case 'PROVIDER_VDC_DELETE_REQUEST' :
        return 'Provider vDC deletion requested.';
      case 'PROVIDER_VDC_MODIFY' :
        return 'Provider vDC was modified.';
      // VAPP NETWORK
      case 'VAPP_NETWORK_CREATE' :
        return 'A vApp network was created.';
      case 'VAPP_NETWORK_DELETE' :
        return 'A vApp network was deleted.';
      case 'VAPP_NETWORK_MODIFY' :
        return 'A vApp network was modified.';
      case 'VAPP_NETWORK_DEPLOY' :
        return 'A vApp network was deployed.';
      case 'VAPP_NETWORK_UNDEPLOY' :
        return 'A vApp network was undeployed.';
      case 'VAPP_NETWORK_UPGRADE' :
        return 'A vApp network was upgraded.';
      // ORG VDC NETWORK
      case 'ORG_VDC_NETWORK_CREATE' :
        return 'An org vdc network was created.';
      case 'ORG_VDC_NETWORK_DELETE' :
        return 'An org vdc network was deleted.';
      case 'ORG_VDC_NETWORK_MODIFY' :
        return 'An org vdc network was modified.';
      case 'ORG_VDC_NETWORK_DEPLOY' :
        return 'An org vdc network was deployed.';
      case 'ORG_VDC_NETWORK_UNDEPLOY' :
        return 'An org vdc network was undeployed.';
      case 'ORG_VDC_NETWORK_UPGRADE' :
        return 'An org vdc network was upgraded.';
      // EXTERNAL NETWORK
      case 'EXTERNAL_NETWORK_CREATE' :
        return 'An external network was created.';
      case 'EXTERNAL_NETWORK_DELETE' :
        return 'An external network was deleted.';
      case 'EXTERNAL_NETWORK_MODIFY' :
        return 'An external network was modified.';
      case 'EXTERNAL_NETWORK_DEPLOY' :
        return 'An external network was deployed.';
      case 'EXTERNAL_NETWORK_UNDEPLOY' :
        return 'An external network was undeployed.';
      case 'EXTERNAL_NETWORK_UPGRADE' :
        return 'An external network was upgraded.';
      // MEDIA
      case 'MEDIA_CREATE' :
        return 'A media was created.';
      case 'MEDIA_IMPORT' :
        return 'A media was imported.';
      case 'MEDIA_MODIFY' :
        return 'A media was modified.';
      case 'MEDIA_DELETE' :
        return 'A media was deleted.';
      case 'MEDIA_CREATE_REQUEST' :
        return 'Media creation requested.';
      case 'MEDIA_IMPORT_REQUEST' :
        return 'Media import requested.';
      case 'MEDIA_MODIFY_REQUEST' :
        return 'Media modify requested.';
      case 'MEDIA_DELETE_REQUEST' :
        return 'Media delete requested.';
      case 'MEDIA_UPLOAD_TIMEOUT' :
        return 'Timeout during upload.';
      case 'MEDIA_QUARANTINE_REJECT' :
        return 'Media Quarantine rejection.';
      // VAPP TEMPLATE
      case 'VAPP_TEMPLATE_CREATE' :
        return 'A vapp-template was created.';
      case 'VAPP_TEMPLATE_IMPORT' :
        return 'A vapp-template was imported.';
      case 'VAPP_TEMPLATE_MODIFY' :
        return 'A vapp-template was modified.';
      case 'VAPP_TEMPLATE_DELETE' :
        return 'A vapp-template was deleted.';
      case 'VAPP_TEMPLATE_CREATE_REQUEST' :
        return 'Vapp-template creation requested.';
      case 'VAPP_TEMPLATE_IMPORT_REQUEST' :
        return 'Vapp-template import requested.';
      case 'VAPP_TEMPLATE_MODIFY_REQUEST' :
        return 'Vapp-template modify requested.';
      case 'VAPP_TEMPLATE_DELETE_REQUEST' :
        return 'Vapp-template delete requested.';
      case 'VAPP_TEMPLATE_ENABLE_DOWNLOAD' :
        return 'Vapp-template download enabled.';
      case 'VAPP_TEMPLATE_DOWNLOAD' :
        return 'VApp-template downloaded';
      // CATALOG
      case 'CATALOG_CREATE' :
        return 'A catalog was created.';
      case 'CATALOG_DELETE' :
        return 'A catalog was deleted.';
      case 'CATALOG_MODIFY' :
        return 'A catalog was modified.';
      case 'CATALOG_PUBLISH' :
        return 'A catalog was published.';
      // USER
      case 'VCD_USER_SESSION_LOGIN' :
        return 'VCD session login.';
      case 'VCD_USER_SESSION_AUTHORIZE' :
        return 'VCD session authorize.';
      case 'VCD_USER_IMPORT' :
        return 'VCD user import.';
      case 'VCD_USER_REMOVE' :
        return 'VCD user remove.';
      case 'VCD_USER_MODIFY' :
        return 'VCD user modify.';
      case 'VCD_USER_LOCKOUT' :
        return 'VCD user lockout.';
      case 'VCD_USER_UNLOCK' :
        return 'VCD user unlock.';
      case 'VCD_USER_LOCK_EXPIRED' :
        return 'VCD user lock expired.';
      case 'VCD_USER_CREATE' :
        return 'VCD user create.';
      case 'VCD_USER_DELETE' :
        return 'VCD user delete.';
      case 'VCD_USER_ENABLE' :
        return 'VCD user enable.';
      case 'VCD_USER_DISABLE' :
        return 'VCD user disable.';
      // USER / KEYCLOAK BASED
      case 'USER_LOGIN' :
        return 'Login.';
      case 'USER_LOGOUT' :
        return 'Logout';
      case 'USER_REFRESH_TOKEN' :
        return 'Refresh token.';
      case 'USER_UPDATE_PASSWORD' :
        return 'Update password.';
      case 'USER_UPDATE_TOTP' :
        return 'Two-factor authentication updated.';
      case 'USER_REMOVE_TOTP' :
        return 'Two-factor authentication removed.';
      case 'USER_SEND_RESET_PASSWORD' :
        return 'Send the reset password email.';
      case 'USER_RESET_PASSWORD' :
        return 'Reset the user password.';
      case 'USER_IMPERSONATE' :
        return 'Impersonate a user.';
      // TASK
      case 'TASK_CREATE' :
        return 'Task was created.';
      case 'TASK_START' :
        return 'Task was started.';
      case 'TASK_ABORT' :
        return 'Task was aborted.';
      case 'TASK_COMPLETE' :
        return 'Task completed.';
      case 'TASK_FAIL' :
        return 'Task failed.';
      // STORAGE PROFILE
      case 'STORAGE_PROFILE_CREATE' :
        return 'Storage profile was created.';
      case 'STORAGE_PROFILE_DELETE' :
        return 'Storage profile was deleted.';
      case 'STORAGE_PROFILE_MODIFY' :
        return 'Storage profile was modified.';
      case 'STORAGE_PROFILE_ADD' :
        return 'Storage profile was added.';
      case 'STORAGE_PROFILE_REMOVE' :
        return 'Storage profile was removed.';
      // SUPPORT TICKET
      case 'SUPPORT_TICKET_CREATED' :
        return 'Support ticket was created.';
      case 'SUPPORT_TICKET_UPDATED' :
        return 'Support ticket was updated.';
      case 'SUPPORT_TICKET_COMMENT_CREATED' :
        return 'Support ticket comment was created.';
      case 'SUPPORT_TICKET_ATTACHMENT_CREATED' :
        return 'Support ticket attachment was created.';
      // VPG
      case 'VPG_LIVE_FAILOVER_START' :
        return 'Live failover start.';
      case 'VPG_TEST_FAILOVER_START' :
        return 'Test failover start.';
      case 'VPG_TEST_FAILOVER_STOP' :
        return 'Test failover stop.';
      case 'VPG_LIVE_FAILOVER_ROLLBACK' :
        return 'Live failover rollback.';
      case 'VPG_LIVE_FAILOVER_ROLLBACK_FAILED' :
        return 'Live failover rollback failed.';
      case 'VPG_LIVE_FAILOVER_COMMIT_FAILED' :
        return 'Live failover commit failed.';
      case 'VPG_LIVE_FAILOVER_COMMIT' :
        return 'Live failover commit failed.';
      // DISK
      case 'DISK_DETACH' :
        return 'Disk detached.';
      case 'DISK_ATTACH' :
        return 'Disk attached.';
      case 'DISK_CREATE_REQUEST' :
        return 'Disk creation requested.';
      case 'DISK_CREATE' :
        return 'A disk was created.';
      case 'DISK_DELETE_REQUEST' :
        return 'Disk deletion requested.';
      case 'DISK_DELETE' :
        return 'A disk was deleted.';
      case 'DR_RUNBOOK_CREATE' :
        return 'A disaster recovery runbook was created.';
      case 'DR_RUNBOOK_UPDATE' :
        return 'A disaster recovery runbook was updated.';
      case 'DR_RUNBOOK_DELETE' :
        return 'A disaster recovery runbook was deleted.';
      case 'USER_CREATE' :
        return 'A user was created.';
      case 'USER_UPDATE' :
        return 'A user was updated.';
      case 'USER_DELETE' :
        return 'A user was deleted.';
      default:
        return eventType as string;
    }
  }
}
