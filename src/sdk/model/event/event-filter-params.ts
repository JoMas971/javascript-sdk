import { EntityType } from '../common/__json__/entity-type';
import { EventFilterParamsJson } from './__json__/event-filter-params-json';
import { EventType } from './__json__/event-type';
import { PagingOrder } from '../user/__json__/paging-order';
import { EventFilterQueryParams } from './__json__/event-filter-query-params';

/**
 * Class EventFilterParams
 */

/* istanbul ignore next: autogenerated */
export class EventFilterParams implements EventFilterQueryParams {

  private readonly _json: EventFilterParamsJson;

  constructor(eventFilterParams: EventFilterParams);
  constructor(eventFilterParamsJson: EventFilterParamsJson);
  constructor(entityUuid: string,
              entityType: EntityType,
              includeDescendantEvents?: boolean,
              type?: EventType,
              taskUuid?: string,
              initiatedBy?: string,
              timestampAfter?: number,
              timestampBefore?: number,
              queryTimestamp?: number,
              offset?: number,
              limit?: number,
              order?: PagingOrder);
  constructor(firstParam: string | EventFilterParams | EventFilterParamsJson, entityType?: EntityType,
              includeDescendantEvents?: boolean,
              type?: EventType,
              taskUuid?: string,
              initiatedBy?: string,
              timestampAfter?: number,
              timestampBefore?: number,
              queryTimestamp?: number,
              offset?: number,
              limit?: number,
              order?: PagingOrder) {
    if (typeof firstParam === 'string') {
      // Parameters constructor
      this._json = {
        entity_uuid: firstParam,
        entity_type: entityType,
        include_descendant_events: includeDescendantEvents,
        type: type,
        task_uuid: taskUuid,
        initiated_by: initiatedBy,
        timestamp_after: timestampAfter,
        timestamp_before: timestampBefore,
        query_timestamp: queryTimestamp,
        offset: offset,
        limit: limit,
        order: order
      } as EventFilterParamsJson;
    } else if (firstParam instanceof EventFilterParams) {
      // Copy constructor
      this._json = Object.assign({}, (firstParam as EventFilterParams).json);
    } else {
      // Json or empty constructor
      this._json = (firstParam || {}) as EventFilterParamsJson;
    }
  }

  /**
   * Get entity uuid.
   * @returns {string}
   */
  get entityUuid(): string {
    return this._json.entity_uuid;
  }

  /**
   * Set entity uuid
   * @param entityUuid
   * @returns {EventFilterParams}
   */
  setEntityUuid(entityUuid: string): EventFilterParams {
    this._json.entity_uuid = entityUuid;
    return this;
  }

  /**
   * Get entity type.
   * @returns {EntityType}
   */
  get entityType(): EntityType {
    return this._json.entity_type;
  }

  /**
   * Set entity type
   * @param entityType
   * @returns {EventFilterParams}
   */
  setEntityType(entityType: EntityType): EventFilterParams {
    this._json.entity_type = entityType;
    return this;
  }

  /**
   * Get include descendant events.
   * @returns {boolean | undefined}
   */
  get includeDescendantEvents(): boolean | undefined {
    return this._json.include_descendant_events;
  }

  /**
   * Set include descendant events.
   * @param includeDescendantEvents
   * @returns {EventFilterParams}
   */
  setIncludeDescendantEvents(includeDescendantEvents: boolean): EventFilterParams {
    this._json.include_descendant_events = includeDescendantEvents;
    return this;
  }

  /**
   * Get type.
   * @returns {EventType | undefined}
   */
  get type(): EventType | undefined {
    return this._json.type;
  }

  /**
   * Set event type.
   * @param type
   * @returns {EventFilterParams}
   */
  setType(type: EventType): EventFilterParams {
    this._json.type = type;
    return this;
  }

  /**
   * Get task uuid.
   * @returns {string | undefined}
   */
  get taskUuid(): string | undefined {
    return this._json.task_uuid;
  }

  /**
   * Set task uuid.
   * @param taskUuid
   * @returns {EventFilterParams}
   */
  setTaskUuid(taskUuid: string): EventFilterParams {
    this._json.task_uuid = taskUuid;
    return this;
  }

  /**
   * Get initiated by.
   * @returns {string | undefined}
   */
  get initiatedBy(): string | undefined {
    return this._json.initiated_by;
  }

  /**
   * Set initiated by.
   * @param initiatedBy
   * @returns {EventFilterParams}
   */
  setInitiatedBy(initiatedBy: string): EventFilterParams {
    this._json.initiated_by = initiatedBy;
    return this;
  }

  /**
   * Get timestamp after.
   * @returns {number | undefined}
   */
  get timestampAfter(): number | undefined {
    return this._json.timestamp_after;
  }

  /**
   * Set timestamp after.
   * @param timestampAfter
   * @returns {EventFilterParams}
   */
  setTimestampAfter(timestampAfter: number): EventFilterParams {
    this._json.timestamp_after = timestampAfter;
    return this;
  }

  /**
   * Get timestamp before.
   * @returns {number | undefined}
   */
  get timestampBefore(): number | undefined {
    return this._json.timestamp_before;
  }

  /**
   * Set timestamp before.
   * @param timestampBefore
   * @returns {EventFilterParams}
   */
  setTimestampBefore(timestampBefore: number): EventFilterParams {
    this._json.timestamp_before = timestampBefore;
    return this;
  }

  /**
   * Get query timestamp.
   * @returns {number | undefined}
   */
  get queryTimestamp(): number | undefined {
    return this._json.query_timestamp;
  }

  /**
   * Set query timestamp.
   * @returns {EventFilterParams}
   */
  setQueryTimestamp(queryTimestamp: number): EventFilterParams {
    this._json.query_timestamp = queryTimestamp;
    return this;
  }

  /**
   * Get offset.
   * @returns {number | undefined}
   */
  get offset(): number | undefined {
    return this._json.offset;
  }

  /**
   * Set offset.
   * @param offset
   * @returns {EventFilterParams}
   */
  setOffset(offset: number): EventFilterParams {
    this._json.offset = offset;
    return this;
  }

  /**
   * Get limit.
   * @returns {number | undefined}
   */
  get limit(): number | undefined {
    return this._json.limit;
  }

  /**
   * Set limit.
   * @param limit
   * @returns {EventFilterParams}
   */
  setLimit(limit: number): EventFilterParams {
    this._json.limit = limit;
    return this;
  }

  /**
   * Get order.
   * @returns {PagingOrder | undefined}
   */
  get order(): PagingOrder | undefined {
    return this._json.order;
  }

  /**
   * Set order.
   * @param order
   * @returns {EventFilterParams}
   */
  setOrder(order: PagingOrder): EventFilterParams {
    this._json.order = order;
    return this;
  }

  /**
   * Get the json representation of this class.
   * @returns {EventFilterParamsJson}
   */
  get json(): EventFilterParamsJson {
    return Object.assign({}, this._json);
  }

  /**
   * Get query params.
   */
  getQueryParams(): EventFilterQueryParams {
    return {
      entityUuid: this.entityUuid,
      entityType: this.entityType,
      includeDescendantEvents: this.includeDescendantEvents,
      type: this.type,
      taskUuid: this.taskUuid,
      initiatedBy: this.initiatedBy,
      timestampAfter: this.timestampAfter,
      timestampBefore: this.timestampBefore,
      queryTimestamp: this.queryTimestamp,
      offset: this.offset,
      limit: this.limit,
      order: this.order
    };
  }

  /**
   * Get the string representation of this class.
   * @returns {string}
   */
  toString(): string {
    return JSON.stringify(this._json, undefined, 2);
  }
}
